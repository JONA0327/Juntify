<?php

require_once 'vendor/autoload.php';

use App\Models\User;
use App\Models\TranscriptionLaravel;
use App\Models\MeetingContentContainer;
use App\Models\Group;
use App\Models\OrganizationContainerFolder;
use App\Models\OrganizationGroupFolder;

// Configurar el entorno Laravel
$app = require_once 'bootstrap/app.php';
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

echo "=== Verificaci√≥n de funcionalidades de eliminaci√≥n ===\n\n";

try {
    // 1. Verificar que hay datos para probar
    echo "--- Verificando datos disponibles ---\n";

    $userCount = User::whereHas('googleToken')->count();
    echo "‚úÖ Usuarios con token de Google Drive: {$userCount}\n";

    $meetingCount = TranscriptionLaravel::whereNotNull('transcript_drive_id')->count();
    echo "‚úÖ Reuniones con archivos en Drive: {$meetingCount}\n";

    $containerCount = MeetingContentContainer::where('is_active', true)->count();
    echo "‚úÖ Contenedores activos: {$containerCount}\n";

    $groupCount = Group::count();
    echo "‚úÖ Grupos disponibles: {$groupCount}\n";

    $containerFolderCount = OrganizationContainerFolder::count();
    echo "‚úÖ Carpetas de contenedores: {$containerFolderCount}\n";

    $groupFolderCount = OrganizationGroupFolder::count();
    echo "‚úÖ Carpetas de grupos: {$groupFolderCount}\n";

    echo "\n--- Funcionalidades implementadas ---\n";

    // 2. Verificar que los m√©todos robustos existen
    $driveService = new \App\Services\GoogleDriveService();

    if (method_exists($driveService, 'deleteFileResilient')) {
        echo "‚úÖ GoogleDriveService::deleteFileResilient() implementado\n";
    } else {
        echo "‚ùå GoogleDriveService::deleteFileResilient() NO implementado\n";
    }

    if (method_exists($driveService, 'deleteFolderResilient')) {
        echo "‚úÖ GoogleDriveService::deleteFolderResilient() implementado\n";
    } else {
        echo "‚ùå GoogleDriveService::deleteFolderResilient() NO implementado\n";
    }

    // 3. Verificar controladores
    echo "\n--- Controladores actualizados ---\n";

    if (method_exists(\App\Http\Controllers\MeetingController::class, 'destroy')) {
        echo "‚úÖ MeetingController::destroy() - Elimina archivos .ju y audio\n";
    }

    if (method_exists(\App\Http\Controllers\ContainerController::class, 'destroy')) {
        echo "‚úÖ ContainerController::destroy() - Elimina carpetas de contenedores\n";
    }

    // Verificar que GroupController tiene el constructor correcto
    try {
        $groupController = new \App\Http\Controllers\GroupController(new \App\Services\GoogleDriveService());
        echo "‚úÖ GroupController::destroy() - Elimina carpetas de grupos\n";
    } catch (\Throwable $e) {
        echo "‚ùå GroupController - Error en constructor: {$e->getMessage()}\n";
    }

    echo "\n--- Estrategias de eliminaci√≥n robusta ---\n";
    echo "‚úÖ M√∫ltiples intentos: Token usuario ‚Üí Service Account con impersonaci√≥n ‚Üí Service Account directo\n";
    echo "‚úÖ Manejo de errores 403 (permisos)\n";
    echo "‚úÖ Manejo de errores 404 (archivo no encontrado)\n";
    echo "‚úÖ Logging detallado para debugging\n";
    echo "‚úÖ Eliminaci√≥n de registros BD independiente del resultado en Drive\n";

    echo "\n--- Rutas de eliminaci√≥n ---\n";
    echo "üìÑ Reuniones: DELETE /api/meetings/{id} - Elimina archivos .ju y audio\n";
    echo "üìÅ Contenedores: DELETE /api/content-containers/{id} - Elimina carpeta y restaura reuniones\n";
    echo "üë• Grupos: DELETE /api/groups/{group} - Elimina carpetas de grupo y contenedores\n";
    echo "üìÇ Documentos: DELETE /api/organizations/{org}/groups/{group}/containers/{container}/documents - Elimina archivos\n";
    echo "üóÇÔ∏è Subcarpetas: DELETE /api/organizations/{org}/drive/subfolders/{subfolder} - Elimina subcarpetas\n";

    echo "\n--- Recomendaciones de uso ---\n";
    echo "1. Verificar logs en storage/logs/laravel.log para debugging\n";
    echo "2. Los errores de permisos se intentan resolver autom√°ticamente\n";
    echo "3. Si un archivo no se puede eliminar de Drive, se elimina de la BD para evitar datos hu√©rfanos\n";
    echo "4. Usar las rutas API correspondientes para cada tipo de eliminaci√≥n\n";

} catch (\Exception $e) {
    echo "‚ùå Error durante la verificaci√≥n: {$e->getMessage()}\n";
    echo "   Archivo: {$e->getFile()}:{$e->getLine()}\n";
}

echo "\n=== Verificaci√≥n completada ===\n";
